  "rules": [
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 1,
      "name": "SetPrefixHeaderCSApi",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": false,
        "rejectionHandler": null,
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json; charset=UTF-8",
        "groovyScript": "// Provide the original URI-prefix to a header that can be used in backend applications\nif ( !(exc.response) )\n{\nexc?.request?.header?.add(\"X-Forwarded-Prefix\", \"/csapi\")\n}\nanything()"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 2,
      "name": "Http403ClearCache",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": false,
        "rejectionHandler": null,
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json;charset=UTF-8",
        "groovyScript": "// if http code 403, then clear cache element for cache key on this request (if any)\nif (exc?.response?.statusCode == 403) {\n  dk.bec.ping.access.plugin.psd2.JwtCacheHandler.getInstance().clear(exc?.getProperty(\"dk.bec.ping.access.plugin:cacheKey\")) \n}\nanything();"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 3,
      "name": "mTLSCheck",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": false,
        "rejectionHandler": null,
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json; charset=UTF-8",
        "groovyScript": "// Ensure that client certificate is used, to later verify request comes through Netscaler\nif(exc?.getSslData()?.getClientCertificateChain()?.isEmpty()) {\n\tpass();\n} else{\n\tpass();\n}"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 4,
      "name": "Remove X-Application-Context header from response",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": true,
        "rejectionHandler": "1",
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json; charset=UTF-8",
        "groovyScript": "def header = exc?.response?.getHeader()\nheader?.removeFields(\"X-Application-Context\") \npass()"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
      "id": 5,
      "name": "Rewrite CS PSD2 Urls",
      "supportedDestinations": [
        "Site"
      ],
      "configuration": {
        "mapFrom": "^/csapi/(.*)",
        "mapTo": "/api/$1"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
      "id": 6,
      "name": "Rewrite PSD2 EIDAS URL",
      "supportedDestinations": [
        "Site"
      ],
      "configuration": {
        "mapFrom": "^/eidas/(.*)",
        "mapTo": "/$1"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
      "id": 7,
      "name": "Rewrite PSD2 BecVerification Urls",
      "supportedDestinations": [
        "Site"
      ],
      "configuration": {
        "mapFrom": "^/BecVerification/1.0/(.*)",
        "mapTo": "/api/$1"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.rewrite.SynapseURLRewritePolicyInterceptor",
      "id": 9,
      "name": "Rewrite PSD2 Urls",
      "supportedDestinations": [
        "Site"
      ],
      "configuration": {
        "mapFrom": "^/eidas/1.0/(.*)",
        "mapTo": "/api/$1"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 10,
      "name": "SetBecVerificationPrefixHeader",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": false,
        "rejectionHandler": null,
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json; charset=UTF-8",
        "groovyScript": "// Provide the original URI-prefix to a header that can be used in backend applications\nif ( !(exc.response) )\n{\nexc?.request?.header?.add(\"X-Forwarded-Prefix\", \"/BecVerification\")\n}\nanything()"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 12,
      "name": "SetPrefixHeader",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": false,
        "rejectionHandler": null,
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json; charset=UTF-8",
        "groovyScript": "// Provide the original URI-prefix to a header that can be used in backend applications\nif ( !(exc.response) )\n{\nexc?.request?.header?.add(\"X-Forwarded-Prefix\", \"/eidas\")\n}\nanything()"
      }
    },
    {
      "className": "com.pingidentity.pa.policy.GroovyPolicyInterceptor",
      "id": 13,
      "name": "SetXHeaders",
      "supportedDestinations": [
        "Site",
        "Agent"
      ],
      "configuration": {
        "rejectionHandlingEnabled": false,
        "rejectionHandler": null,
        "errorResponseCode": 403,
        "errorResponseStatusMsg": "Forbidden",
        "errorResponseTemplateFile": "policy.error.page.template.json",
        "errorResponseContentType": "application/json; charset=UTF-8",
        "groovyScript": "// Move X-Forwarded-* headers to BEC-Forwarded-*, to help PaaS read them\nif ( !(exc.response) )\n{\ndef header = exc?.request?.header;\nheader?.add(\"BEC-Forwarded-Host\", header?.getFirstValue(\"X-Forwarded-Host\"))\nheader?.add(\"BEC-Forwarded-Port\", header?.getFirstValue(\"X-Forwarded-Port\"))\nheader?.add(\"BEC-Forwarded-Proto\", header?.getFirstValue(\"X-Forwarded-Proto\"))\nheader?.add(\"BEC-Forwarded-For\", header?.getFirstValue(\"X-Forwarded-For\"))\n}\nanything()"
      }
    }
  ]